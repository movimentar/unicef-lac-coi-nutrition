---
title: "Results - Cost of Inaction"
author: "movimentar GmbH"
date: "`r format(Sys.time(), '%d %B %Y')`"
execute:
  echo: false  # Do not display code in the output
format:
  docx: # Change to docx to get the word version
    toc: true
    toc-depth: 2
---

```{r}
#| label: setup
#| include: false
#| message: false

# A function to install packages if they are not already installed.
install_if_missing <- function(p) {
  if (!requireNamespace(p, quietly = TRUE)) {
    install.packages(p, dependencies = TRUE)
  }
}

# List of all packages required for the document.
required_packages <- c(
  "targets",
  "tarchetypes",
  "tidyverse",
  "scales",
  "gt",
  "FactoMineR",
  "factoextra"
)

# Install CRAN packages
for (package in required_packages) {
  install_if_missing(package)
}

# Install wpp2022 from GitHub as specified in documentation
if (!requireNamespace("remotes", quietly = TRUE)) {
  install.packages("remotes")
}
if (!requireNamespace("wpp2022", quietly = TRUE)) {
  remotes::install_github("PPgp/wpp2022")
}

# Load all required packages after installation check.
for (package in required_packages) {
  library(package, character.only = TRUE)
}

# Remove dplyr from the list since it's loaded with tidyverse.
library(dplyr)

# Load target objects required for the document
tar_load(intervention_list) 
```

This document compiles the core figures and tables supporting the final Cost of Inaction (CoI) study, structured by analytical component. It is intended to support reporting and review, not for direct publication.

# Result tables and figures

```{r}
#| label: custom-functions
#| include: false

# Function to arrange df by intervention name
arrange_by_int_name <- function(df, intervention_list) {
  df %>%
    left_join(select(intervention_list, intervention_id, intervention_name),
      by = "intervention_name"
    ) %>%
    arrange(intervention_id) %>%
    select(-intervention_id) %>%
    return()
}

# New function to format the LiST input table
format_list_input_gt <- function(df) {
  df %>%
    ungroup() %>%
    gt() %>%
    tab_header(title = "Input coverages used in LiST") %>%
    cols_hide(intervention_id) %>%
    cols_label(
      emergency = "Emergency",
      country = "Country",
      target_group = "Target group",
      intervention_name = "Intervention name",
      coverage = "Coverage (%)",
      list_name = "Intervention name in LiST"
    ) %>%
    fmt_number(
      columns = coverage,
      decimals = 1
    ) %>%
    cols_align(align = "center", columns = everything())
}
```

## LiST model coverage inputs

These inputs represent the baseline and targeted intervention coverage values used in LiST simulations for each emergency scenario.

```{r list-input}
tar_read(list_input) %>%
  format_list_input_gt()
```

## Coverage of interventions needed respective to nutrition needs

```{r intervention_coverage}
tar_read(coi_coverages) %>% 
  arrange_by_int_name(intervention_list) %>% 
  ungroup() %>% 
  gt() %>% 
  tab_header(
    title = "Coverage of interventions needed respective to nutrition needs"
  ) %>% 
  tab_spanner(
    label = "Eta-Iota",
    columns = contains("Eta-Iota")
  ) %>% 
  tab_spanner(
    label = "Migration flows",
    columns = contains("Migration")
  ) %>% 
  cols_label(
    intervention_name = "Intervention name",
    `total_beneficiaries_Eta-Iota` = "Interventions delivered",
    `ideal_delivered_Eta-Iota` = "Interventions needed",
    `coverage_Eta-Iota` = "Eta-Iota coverage (%)",
    `total_beneficiaries_Migration flows` = "Interventions delivered",
    `ideal_delivered_Migration flows` = "Interventions needed",
    `coverage_Migration flows` = "Migration coverage (%)",
  ) %>% 
  fmt_number(
    columns = everything(),
    decimals = 0
  ) %>% 
  fmt_number( # format column
      columns = contains("coverage"),
      decimals = 2
  ) %>% 
  cols_align("center")
```

## Principal Component Analysis results
```{r pca_results}
tar_load(coi_pca)

# display/format figures and tables
coi_pca$pca_biplot
coi_pca$var_contributions %>% 
  gt(rowname_col = "intervention_id") %>% 
  tab_header(title = "PCA variable contributions") %>% 
  fmt_number(columns = everything(),
             decimals = 4)
coi_pca$screeplot
coi_pca$clusters
coi_pca$dendogram
```

## Needs and assistance cost summary
```{r cost_summary}
tar_read(coi_costs) %>%
  ungroup() %>%
  select(
    target_group,
    emergency,
    total_beneficiaries,
    total_cost,
    ideal_delivered,
    ideal_cost,
    funding_gap,
    global_coverage
  ) %>%
  gt(rowname_col = "target_group", groupname_col = "emergency") %>%
  tab_header(
    title = "Needs and assistance cost summary"
  ) %>% 
  summary_rows(
    groups = everything(),
    columns = c(
      "total_beneficiaries",
      "ideal_delivered",
      "total_cost",
      "ideal_cost",
      "funding_gap",
      "global_coverage"
    ),
    fns = list(Total = ~ sum(.)),
    fmt = list( ~ fmt_number(., decimals = 0))
  ) %>%
  fmt_number(columns = everything(),
             decimals = 0) %>% 
  tab_spanner(
    label = "Implemented response",
    columns = c("total_beneficiaries", "total_cost")
  ) %>% 
  tab_spanner(
    label = "Ideal response",
    columns = c("ideal_delivered", "ideal_cost", "funding_gap")
  ) %>% 
  cols_align("center") %>% 
  cols_label(
    total_beneficiaries = "Interventions delivered",
    global_coverage = "Global coverage (%)",
    total_cost = "Costs (USD)",
    ideal_delivered = "Interventions needed",
    ideal_cost = "Costs (USD)",
    funding_gap = "Funding gap (USD)"
  )
  
  
```

## Direct benefits

```{r direct_benefits}
# Malnutrition indicators
tar_read(coi_dir_benefits)$malnutrition %>%
  ungroup() %>%
  # Remove indicators with neglible effects as from the model
  # Maternal and neonatal mortality are not included in this table as the LiST model outputs showed a marginal or zero effect for these indicators across all scenarios. This does not necessarily imply that UNICEF's interventions had no effect on these outcomes. It may instead reflect a limitation of the model itself, as it failed to detect the benefits of the concentrated, child-focused interventions that were implemented. The findings of the study suggest that a more comprehensive package, including interventions for pregnant and lactating women, would be needed to see a significant effect on these indicators.
  filter(!(
    indicator_name_absolute %in% c("Maternal mortality", "Neonatal mortality")
  )) %>%
  gt(groupname_col = "emergency") %>%
  tab_header(title = "Estimated direct benefits in child malnutrition and mortality cases prevented by nutrition response scenario per emergency using the LiST model (2020-2022)") %>%
  cols_hide("indicator_category") %>%
  fmt_number(columns = everything(),
             decimals = 0) %>%
  cols_align("center") %>%
  cols_label(
    indicator_name_absolute = "Indicator name",
    coverage_0 = "Cases in no response scenario (0% coverage)",
    saved_implemented = "Cases prevented by UNICEF response",
    saved_30 = "Cases prevented by 30% coverage",
    saved_95 = "Cases prevented by 95% coverage"
  )

# Breastfeeding indicators
tar_read(coi_dir_benefits)$breastfeeding %>%
  ungroup() %>%
  filter(indicator_category == "breastfeeding") %>%
  # changing improvement sign to match the improvement logic
  mutate(
    saved_implemented = abs(saved_implemented),
    saved_30 = abs(saved_30),
    saved_95 = abs(saved_95)
  ) %>% 
  gt(groupname_col = "emergency") %>%
  tab_header(title = "Estimated direct benefits in breastfeeding indicators by nutrition response scenario per emergency using the LiST model (2020-2022)") %>%
  cols_hide("indicator_category") %>%
  fmt_number(columns = everything(),
             decimals = 0) %>%
  cols_align("center") %>%
  cols_label(
    indicator_name_absolute = "Indicator name",
    coverage_0 = "Improvements in no response scenario (0% coverage)",
    saved_implemented = "Improvements by UNICEF response",
    saved_30 = "Improvements by 30% coverage",
    saved_95 = "Improvements by 95% coverage"
  )
```

## Indirect benefits

```{r indirect benefits}
tar_load(c("mean_formula_price", "formula_packages"))

# Build the main (undiscounted) table source
indir_all <- tar_read(coi_indir_benefits) |>
  dplyr::ungroup() |>
  dplyr::mutate(
    dplyr::across(dplyr::contains("Eta-Iota"), abs),
    dplyr::across(dplyr::contains("Migration"), abs)
  )

# Keep formula + UNDISCOUNTED cognitive-income rows only
indir_main <- indir_all |>
  dplyr::filter(
    indicator_name_absolute %in% c(
      "Cost of feeding a child with formula for the first 2 years",
      "Potential future income lost due to cognitive losses",
      "Potential future income lost due to cognitive losses (undiscounted)"
    )
  ) |>
  # If both cognitive labels exist, keep the undiscounted one
  dplyr::filter(!grepl("\\bPV\\b", indicator_name_absolute))

# Numeric row indices (robust)
formula_idx <- which(grepl("^Cost of feeding a child with formula", indir_main$indicator_name_absolute))
cog_idx <- which(grepl("^Potential future income lost due to cognitive losses( \\(undiscounted\\))?$",
                       indir_main$indicator_name_absolute))

# Precompute footnote strings (avoid inline evaluation glitches)
fn_formula_price <- sprintf(
  "Formula price assumption = %s USD per child over 24 months.",
  format(mean_formula_price * formula_packages, big.mark = ",", digits = 1)
)
fn_formula_expl <- "Two-year formula outlays avoided for additional EBF children (undiscounted)."
fn_cog <- "Cognitive-income preserved for additional EBF children (undiscounted). Earnings uplift ≈ 2.796% per EBF child (2.62 IQ points × 1.067% earnings per IQ point)."
fn_title <- "Related intervention: breastfeeding counselling/promotion (EBF support). Figures are undiscounted; discounted present values (3–5% real) can be provided in sensitivity analysis."

# Build table
tbl <- indir_main |>
  gt::gt(rowname_col = "indicator_name_absolute") |>
  gt::tab_header(
    title = "Estimated indirect benefits from exclusive breastfeeding improvements — undiscounted (2015 USD)"
  )

# Hide helper column if it exists
if ("indicator_name" %in% names(indir_main)) {
  tbl <- tbl |> gt::cols_hide(columns = "indicator_name")
}

tbl <- tbl |>
  gt::fmt_number(columns = where(is.numeric), decimals = 0, use_seps = TRUE) |>
  gt::cols_align("center") |>
  gt::tab_spanner(label = "Eta-Iota",        columns = dplyr::contains("Eta")) |>
  gt::tab_spanner(label = "Migration flows", columns = dplyr::contains("Migration")) |>
  gt::grand_summary_rows(
    columns = c("Eta-Iota_implemented","Eta-Iota_30","Eta-Iota_95",
                "Migration flows_implemented","Migration flows_30","Migration flows_95"),
    fns = list(Total = ~ sum(., na.rm = TRUE)),
    fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)
  ) |>
  gt::cols_label(
    `Eta-Iota_implemented`        = "USD saved by UNICEF response",
    `Eta-Iota_30`                 = "USD saved by 30% coverage",
    `Eta-Iota_95`                 = "USD saved by 95% coverage",
    `Migration flows_implemented` = "USD saved by UNICEF response",
    `Migration flows_30`          = "USD saved by 30% coverage",
    `Migration flows_95`          = "USD saved by 95% coverage"
  )

# Footnotes by numeric index (no tidy-eval in rows)
if (length(formula_idx) > 0L) {
  tbl <- tbl |>
    gt::tab_footnote(footnote = fn_formula_price,
                     locations = gt::cells_stub(rows = formula_idx)) |>
    gt::tab_footnote(footnote = fn_formula_expl,
                     locations = gt::cells_stub(rows = formula_idx))
}
if (length(cog_idx) > 0L) {
  tbl <- tbl |>
    gt::tab_footnote(footnote = fn_cog,
                     locations = gt::cells_stub(rows = cog_idx))
}

# Optional title-level caveat
tbl <- tbl |>
  gt::tab_footnote(footnote = fn_title,
                   locations = gt::cells_title(groups = "title"))

tbl

```

```{r}
#| label: indirect-benefits-pv
#| warning: false

library(dplyr)
library(tidyr)
library(purrr)
library(gt)
library(stringr)
library(targets)

# --- Inputs from targets ---
dir_b <- tar_read(coi_dir_benefits)
gni    <- tar_read(gni_forecast)    # emergency, year, real_gni_pc_const_usd, pop_group
ishare <- tar_read(income_share)    # labour income share % of GDP

# Mean labour-income share across study countries (2020)
countries_labour_income <- ishare %>%
  filter(ref_area %in% c("GTM","HND","NIC","COL","PER"), time == "2020") %>%
  pull(obs_value) %>%
  mean(na.rm = TRUE)

# Emergency-specific real GNI per-capita streams (2015 USD) for 2038–2080
gni_by_em <- gni %>%
  filter(year >= 2038, year <= 2080) %>%
  select(emergency, year, real_gni_pc_const_usd) %>%
  group_by(emergency) %>%
  summarise(
    years  = list(year),
    gni_pc = list(real_gni_pc_const_usd),
    .groups = "drop"
  )

# Earnings uplift per additional EBF child (2.62 IQ * 1.067% per IQ point ≈ 2.796%)
EARNINGS_UPLIFT <- 2.62 * 0.01067

cognitive_pv <- function(n_children, gni_pc_vec, years_vec,
                         labour_share_pct, rate, base_year = 2022,
                         uplift = EARNINGS_UPLIFT) {
  annual <- gni_pc_vec * (labour_share_pct / 100) * uplift * n_children
  df     <- (1 + rate)^(years_vec - base_year)
  sum(annual / df, na.rm = TRUE)
}

# Build PV rows from the additional EBF children
indir_pv <- dir_b$breastfeeding %>%
  ungroup() %>%                                   # remove any prior grouping
  filter(indicator_name_absolute == "Exclusively breastfed children") %>%
  select(-coverage_0, -indicator_category) %>%    # drop grouping col so gt won't group
  pivot_longer(
    cols = saved_implemented:saved_95,
    names_to     = "coverage_type",
    names_prefix = "saved_",
    values_to    = "n_children"
  ) %>%
  mutate(n_children = abs(n_children)) %>%        # ensure benefits are positive
  left_join(gni_by_em, by = "emergency") %>%
  mutate(
    cognitive_cost_pv_3 = pmap_dbl(
      list(n_children, gni_pc, years),
      ~ cognitive_pv(..1, ..2, ..3, countries_labour_income, rate = 0.03)
    ),
    cognitive_cost_pv_5 = pmap_dbl(
      list(n_children, gni_pc, years),
      ~ cognitive_pv(..1, ..2, ..3, countries_labour_income, rate = 0.05)
    )
  ) %>%
  select(-n_children, -gni_pc, -years) %>%
  pivot_longer(
    c(cognitive_cost_pv_3, cognitive_cost_pv_5),
    names_to = "metric", values_to = "value"
  ) %>%
  mutate(
    indicator_name_absolute = case_when(
      metric == "cognitive_cost_pv_3" ~ "Potential future income lost due to cognitive losses (PV, 3%)",
      metric == "cognitive_cost_pv_5" ~ "Potential future income lost due to cognitive losses (PV, 5%)",
      TRUE ~ metric
    )
  ) %>%
  select(-metric) %>%
  pivot_wider(
    names_from  = c("emergency", "coverage_type"),
    values_from = value
  ) %>%
  arrange(match(indicator_name_absolute,
                c("Potential future income lost due to cognitive losses (PV, 3%)",
                  "Potential future income lost due to cognitive losses (PV, 5%)")))

# Display in millions (2015 USD) — no "grand total" across 3% and 5%
indir_pv %>%
  mutate(across(where(is.numeric), ~ . / 1e6)) %>%
  gt(rowname_col = "indicator_name_absolute") %>%
  tab_header(
    title = "Indirect benefits — Present values under social discounting (millions, 2015 USD)"
  ) %>%
  fmt_number(columns = where(is.numeric), decimals = 1) %>%
  cols_align("center") %>%
  # keep Eta-Iota block first, then Migration flows
  cols_move_to_start(columns = c("Eta-Iota_implemented","Eta-Iota_30","Eta-Iota_95")) %>%
  cols_move(columns = c("Migration flows_implemented","Migration flows_30","Migration flows_95"),
            after = "Eta-Iota_95") %>%
  tab_spanner(label = "Eta-Iota",        columns = contains("Eta-Iota")) %>%
  tab_spanner(label = "Migration flows", columns = contains("Migration flows")) %>%
  cols_label(
    `Eta-Iota_implemented`        = "PV (UNICEF response)",
    `Eta-Iota_30`                 = "PV (30% coverage)",
    `Eta-Iota_95`                 = "PV (95% coverage)",
    `Migration flows_implemented` = "PV (UNICEF response)",
    `Migration flows_30`          = "PV (30% coverage)",
    `Migration flows_95`          = "PV (95% coverage)"
  ) %>%
  tab_footnote(
    footnote = "Present values computed with real social discount rates of 3% and 5%; base year = 2022; earnings uplift ≈ 2.796% per additional EBF child.",
    locations = cells_title(groups = "title")
  )

```


\newpage

# Support tables 

```{r}
#| label: list-inputs
#| # This is the same table as under list-input

tar_read(list_input) %>% 
  ungroup() %>% 
  gt() %>% 
  tab_header(title = "Input coverages used in LiST models") %>% 
  cols_hide(intervention_id) %>% 
  cols_label( # rename columns
      emergency = "Emergency",
      country = "Country",
      target_group = "Target group",
      intervention_name = "Intervention name",
      coverage = "Coverage (%)",
      list_name = "Intervention name in LiST"
    ) %>% 
    fmt_number( # format column
      columns = coverage,
      decimals = 1
    ) %>% 
  cols_align(align = "center", columns = everything())
```


```{r, warning=FALSE}
#| label: baby formula prices

tar_read(formula_price) %>% 
  filter(Country %in% c(
      "Guatemala",
      "Honduras",
      "Nicaragua",
      "Colombia",
      "Peru"
    )) %>%
  mutate(`Unit cost for price of lowest economy brand of formula per 900-gram container (US$)` = if_else(
    `Unit cost for price of lowest economy brand of formula per 900-gram container (US$)`== "Not Available",
    NA,
    as.double(`Unit cost for price of lowest economy brand of formula per 900-gram container (US$)`)
  )) %>% 
  gt(rowname_col = "Country") %>% 
  tab_header(title = "Price data of baby formula containers in countries of study from the 'Cost of Not Breastfeeding Tool'") %>% 
  grand_summary_rows(columns = `Unit cost for price of lowest economy brand of formula per 900-gram container (US$)`,
                     fns = list(Mean = ~mean(., na.rm = TRUE)))
```


```{r}
#| label: median-costs

tar_read(median_costs_cleaned) %>%
  left_join(select(intervention_list, intervention_id, intervention_name),
            by = "intervention_id") %>% 
  relocate(intervention_name, .after = emergency) %>% 
  pivot_wider(names_from = emergency, 
              values_from = median_cost_person) %>% 
  select(-intervention_id) %>% 
  arrange_by_int_name(intervention_list) %>% 
  gt(rowname_col = "intervention_name") %>% 
  tab_header(title = "Cleaned median intervention delivery costs (USD) per person used in estimations") %>% 
  fmt_number(columns = everything(),
             decimals = 2) %>% 
  tab_spanner(
    label = "USD costs",
    columns = c("Eta-Iota", "Migration flows")
  )
  
```


```{r}
#| label: baby-formula-packages

data.frame(
  Period_Weeks = c("1-2", "3-4", "5-8", "9-16", "17-20 (5 months)", "21-24 (6+ months)"),
  Formula_Grams_per_Bottle = c(8.8, 13.2, 17.6, 22, 26.4, 26.4),
  Bottles_per_Day = c(7, 5, 5, 5, 4, 2),
  Feeding_Duration_Weeks = c(2, 2, 4, 8, 4, 72)
) %>% 
  gt() %>% 
  tab_header(title = "Baby Formula Feeding Schedule as per manufacturer's instructions used in estimations") %>% 
  tab_source_note(source_note = "Source: Löwezahn organics, https://bit.ly/42bNli8")


```


```{r excel_export}
# Function to arrange dataframes by intervention name using factors from intervention_id
arrange_by_int_name <- function(df, intervention_list){
    df %>% 
    left_join(select(intervention_list, intervention_id, intervention_name),
              by = "intervention_name") %>% 
    arrange(intervention_id) %>% 
    select(-intervention_id) %>% 
    return()
}


# Input data summary (PIN, people reached, coverage, funding)
input_table_df <- tar_read(coi_costs) %>%
  ungroup() %>%
  select(
    Emergency = emergency,
    `Population group` = target_group,
    `People reached` = total_beneficiaries,
    `Interventions needed` = ideal_delivered,
    `Coverage (%)` = global_coverage,
    `Funds allocated (USD)` = total_cost
  )

# Intervention coverage (intervention-level)
coverage_df <- tar_read(coi_coverages) %>%
  arrange_by_int_name(intervention_list) %>%
  ungroup() %>%
  select(
    `Intervention name` = intervention_name,
    `Interventions delivered (Eta-Iota)` = `total_beneficiaries_Eta-Iota`,
    `Interventions needed (Eta-Iota)` = `ideal_delivered_Eta-Iota`,
    `Coverage (%) Eta-Iota` = `coverage_Eta-Iota`,
    `Interventions delivered (Migration)` = `total_beneficiaries_Migration flows`,
    `Interventions needed (Migration)` = `ideal_delivered_Migration flows`,
    `Coverage (%) Migration` = `coverage_Migration flows`
  )

# Funding summary
cost_summary_df <- tar_read(coi_costs) %>%
  ungroup() %>%
  select(
    Emergency = emergency,
    `Population group` = target_group,
    `Interventions delivered` = total_beneficiaries,
    `Costs (USD)` = total_cost,
    `Interventions needed` = ideal_delivered,
    `Costs needed (USD)` = ideal_cost,
    `Funding gap (USD)` = funding_gap,
    `Global coverage (%)` = global_coverage
  )

# Direct benefits – child mortality and malnutrition
direct_benefits_mortality_df <- tar_read(coi_dir_benefits)$malnutrition %>%
  ungroup() %>%
  # Remove indicators with neglible effects as from the model
  filter(!indicator_name_absolute %in% c("Maternal mortality", "Neonatal mortality")) %>%
  select(
    Emergency = emergency,
    `Indicator name` = indicator_name_absolute,
    `Cases in 0% coverage` = coverage_0,
    `Cases prevented by UNICEF response` = saved_implemented,
    `Cases prevented by 30% coverage` = saved_30,
    `Cases prevented by 95% coverage` = saved_95
  )

# Direct benefits – breastfeeding
direct_benefits_bf_df <- tar_read(coi_dir_benefits)$breastfeeding %>%
  ungroup() %>%
  filter(indicator_category == "breastfeeding") %>%
  mutate(across(
    .cols = c(saved_implemented, saved_30, saved_95),
    .fns = abs
  )) %>%
  select(
    Emergency = emergency,
    `Indicator name` = indicator_name_absolute,
    `Improvements in 0% coverage` = coverage_0,
    `Improvements by UNICEF response` = saved_implemented,
    `Improvements by 30% coverage` = saved_30,
    `Improvements by 95% coverage` = saved_95
  )

# Indirect benefits
indirect_df <- tar_read(coi_indir_benefits) %>%
  ungroup() %>%
  mutate(across(contains("Eta-Iota"), abs),
         across(contains("Migration"), abs)) %>%
  select(
    `Indicator name` = indicator_name_absolute,
    `Eta-Iota – UNICEF response` = `Eta-Iota_implemented`,
    `Eta-Iota – 30% coverage` = `Eta-Iota_30`,
    `Eta-Iota – 95% coverage` = `Eta-Iota_95`,
    `Migration – UNICEF response` = `Migration flows_implemented`,
    `Migration – 30% coverage` = `Migration flows_30`,
    `Migration – 95% coverage` = `Migration flows_95`
  )



library(writexl)
write_xlsx(
  list(
    "Input data summary" = input_table_df,
    "Intervention coverage" = coverage_df,
    "Funding summary" = cost_summary_df,
    "Direct benefits - mortality" = direct_benefits_mortality_df,
    "Direct benefits - breastfeeding" = direct_benefits_bf_df,
    "Indirect benefits" = indirect_df
  ),
  path = "CoI_results_summary.xlsx"
)

```

